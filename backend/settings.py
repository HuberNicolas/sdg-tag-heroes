"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
import os
from utils.env_loader import load_env, get_env_variable, is_running_in_docker
load_env('backend.env')
SECRET_KEY = get_env_variable('SECRET_KEY')
ALGORITHM = get_env_variable('ALGORITHM')



# Settings
from settings.settings import BackendSettings, TimeZoneSettings, MariaDBSettings, AuthenticationRouterSettings
backend_settings = BackendSettings()
time_zone_settings = TimeZoneSettings()
mariadb_settings = MariaDBSettings()
authentication_router_settings = AuthenticationRouterSettings()


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = BackendSettings.DJANGO_DEBUG_MODE

ALLOWED_HOSTS = ["10.5.0.3"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'corsheaders',
    "backend.accounts",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # Make sure this is at the top
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]



# Allow all origins (not recommended for production)
CORS_ALLOW_ALL_ORIGINS = True

# Allow requests from specific origins (in your case, localhost:3030)
#CORS_ALLOWED_ORIGINS = [
#    'http://localhost:3030',  # Nuxt frontend
#]

ROOT_URLCONF = "backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Load environment variables from the mariadb.env file
load_env('mariadb.env')

# Determine if the script is running inside a Docker container
running_in_docker = is_running_in_docker()

# Fetch MariaDB connection details from environment variables
user = get_env_variable('MARIADB_USER')
password = get_env_variable('MARIADB_PASSWORD')
database_name = get_env_variable('MARIADB_DATABASE')

# Either container to container or local to container
host = get_env_variable('MARIADB_HOST') if running_in_docker else get_env_variable('MARIADB_HOST_LOCAL_IP')
port = int(get_env_variable('MARIADB_PORT')) if running_in_docker else int(get_env_variable('MARIADB_PORT_LOCAL'))

# Database configuration using the custom get_env_variable
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': database_name,
        'USER':user,
        'PASSWORD': password,
        'HOST':host,
        'PORT': port,
        'OPTIONS': {
            'charset': mariadb_settings.MARIADB_CHARSET,
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE =  backend_settings.LANGUAGE_CODE

TIME_ZONE = time_zone_settings.DJANGO_TIME_ZONE

USE_I18N = backend_settings.USE_I18N

USE_TZ = time_zone_settings.DJANGO_USE_TZ


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "accounts.CustomUser"


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}

from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=authentication_router_settings.ACCESS_TOKEN_LIFETIME_MINUTES),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=authentication_router_settings.REFRESH_TOKEN_LIFETIME_MINUTES),
    'ROTATE_REFRESH_TOKENS': authentication_router_settings.ROTATE_REFRESH_TOKENS,
    'BLACKLIST_AFTER_ROTATION': authentication_router_settings.BLACKLIST_AFTER_ROTATION,
    'ALGORITHM': ALGORITHM,
    'AUTH_HEADER_TYPES': (authentication_router_settings.AUTH_HEADER_TYPES),
    'SIGNING_KEY': SECRET_KEY,  # Use your Django SECRET_KEY for signing
}

